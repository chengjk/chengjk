<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacky&#39;s blog</title>
  
  <subtitle>学而不思则罔，思而不学则殆！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chengjk.com/"/>
  <updated>2019-04-13T02:28:10.112Z</updated>
  <id>http://chengjk.com/</id>
  
  <author>
    <name>Jacky Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deploy Kit</title>
    <link href="http://chengjk.com/2018/04/27/deploy-kit/"/>
    <id>http://chengjk.com/2018/04/27/deploy-kit/</id>
    <published>2018-04-27T09:49:02.000Z</published>
    <updated>2019-04-13T02:28:10.112Z</updated>
    
    <content type="html"><![CDATA[<p>DeployKit，部署工具,一个命令形式的可执行程序<code>dk</code>。在实际应用上线是再平常不过的事了，目前的一些平台工具可以覆盖大部分的上线工作，可是还是有一丢丢需要手动操作，这里就是来解决这部分问题的。</p><p><a href="https://github.com/chengjk/deployKit/RELEASE.md" target="_blank" rel="noopener">Release Note</a></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>这些任务概括起来是把一个包部署到一组服务器，然后执行一些脚本，具体过程类似：1.上传，2 解压。文件包最可能在的几个地方：</p><ol><li>本地磁盘。需要上传服务器.并执行相应命令。</li><li>公网地址。生产服务器可以访问，直接在服务器上 <code>wget</code><a href="https://eternallybored.org/misc/wget/" target="_blank" rel="noopener">wget for win</a>就可以获得。</li><li>内网地址。生产服务器不能访问，需要先下载到本地磁盘再上传到服务器。</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行根目录<code>install.sh</code>可将项目打包成可执行程序到<code>./bin</code>目录。不同操作系统需要在各自的GO环境下安装。或者直接从<a href="https://github.com/chengjk/deployKit/releases" target="_blank" rel="noopener">github</a>下载可执行文件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>工具使用命令风格，没有界面。编译结果为可执行文件<code>dk</code> 其参数用法如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ ./dk.exe -h</span><br><span class="line">Usage of E:\github\deployKit\bin\dk.exe:</span><br><span class="line">  -lurl string</span><br><span class="line">        内网仓库地址,需要先下载到本地磁盘再上传服务器. e.g. http://127.0.0.1/&#123;tag&#125;/&#123;name&#125;.zip.</span><br><span class="line">  -name string</span><br><span class="line">        名称,可作为变量&#123;name&#125;使用,对应配置文件名.不能使用变量. e.g. ec表示使用ec.json. (default <span class="string">"config"</span>)</span><br><span class="line">  -path string</span><br><span class="line">        目标文件路径. e.g. /tmp/&#123;tag&#125;/&#123;name&#125;.zip.</span><br><span class="line">  -pcmd string</span><br><span class="line">        prefix cmd,文件上传前在server的workDir中执行，分号隔开.e.g. mkdir p</span><br><span class="line">  -scmd string</span><br><span class="line">        suffix cmd,文件上传后在server的workDir中执行，分号隔开.e.g. rm -f *.zip</span><br><span class="line">  -tag string</span><br><span class="line">        标签.一般是版本信息,可作为变量&#123;tag&#125;使用.不能使用变量. e.g. v1.0</span><br><span class="line">  -url string</span><br><span class="line">        外网仓库地址.直接在服务器上 wget. e.g. http://test.com/&#123;tag&#125;/&#123;name&#125;.zip.</span><br><span class="line">  -v    show current version.</span><br><span class="line"></span><br><span class="line">Tips: url,path,和lurl三个参数互斥,按照上述顺序检查到一个有效值时停止,否则报错.</span><br></pre></td></tr></table></figure><blockquote><p><code>./dk -h</code> 查看Usage。<br><code>./dk -v</code> 查看当前版本号。</p></blockquote><p>配置文件<code>config.json</code>和dk.exe 同目录，自定义配置文件名时需要在<code>-name</code>参数中传入。结构如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"web"</span>,</span><br><span class="line">  <span class="attr">"tag"</span>: <span class="string">"v0.8"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"./upload/&#123;name&#125;.tar"</span>,</span><br><span class="line">  <span class="attr">"lurl"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"prefixCmd"</span>: <span class="string">"mkdir &#123;tag&#125;"</span>,</span><br><span class="line">  <span class="attr">"suffixCmd"</span>: <span class="string">"tar -xvf &#123;name&#125;.tar -C ./&#123;tag&#125;"</span>,</span><br><span class="line">  <span class="attr">"servers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"ip"</span>: <span class="string">"172.30.10.82"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">      "password": "", //password is empty. use publicKey.</span><br><span class="line">      "publicKey":"./a.pem", //defalut ~/.ssh/id_rsa</span><br><span class="line">      "workDir": "/tmp/jacky"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"ip"</span>: <span class="string">"172.30.10.83"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">      "password": "xxxxx", //password is not empty. use password.</span><br><span class="line">      "publicKey":"",</span><br><span class="line">      "workDir": "/tmp/jacky"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中各个属性的意义：</p><ul><li>name对应参数 <code>-name</code> 配置文件名。可作为变量<code>{name}</code>使用，默认值”config”。不能使用变量；</li><li>tag 对应参数 <code>-tag</code> 是目标项目的版本号，可作为变量<code>{tag}</code>使用，不能使用变量；</li><li>url、path和lurl是资源文件路径对应参数 <code>-path -url -lurl</code>;</li><li>prefixCmd 对应参数<code>-pcmd</code> 文件上传前在workDir中执行，分号隔开；</li><li>suffixCmd 对应参数<code>-scmd</code> 文件上传后在workDir中执行，分号隔开.</li><li>servers是目标服务器信息列表，没有参数对应。</li></ul><p><strong> 如果参数在配置文件和命令行都有设置，优先使用命令行。</strong></p><p>实例中展示了如何把web.tar的v0.8版本从本地磁盘”./upload/web.tar”部署到82和83两个环境中.<br>如果web.tar在内网服务器上，则可设置 <code>-lurl</code>替代<code>-path</code> 为 </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- "path": "./upload/&#123;name&#125;.tar",</span></span><br><span class="line"><span class="addition">+ "lurl": "http://localserver/&#123;project&#125;/&#123;tag&#125;/&#123;name&#125;.tar",</span></span><br></pre></td></tr></table></figure><p>设置好配置文件后双击dk.exe即可。这种方式的优点是便捷，缺点是每次都需要更新 <code>tag</code>。</p><h3 id="换做用命令的方式"><a href="#换做用命令的方式" class="headerlink" title="换做用命令的方式"></a>换做用命令的方式</h3><p>配置文件中只有servers是必须的，其他都用命令行替代,全参形式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dk -name=config -tag=v0.8.5 -path=<span class="string">"./upload/web.tar"</span> -pcmd=<span class="string">'mkdir &#123;tag&#125;;'</span> -scmd=<span class="string">'tar -xvf web.tar -C ./&#123;tag&#125;'</span></span><br></pre></td></tr></table></figure><p>如果配置文件名是默认的 config.json 则-name 参数可省略。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dk -tag=v0.8.5 -path=<span class="string">"./upload/web.tar"</span> -pcmd=<span class="string">'mkdir &#123;tag&#125;;'</span> -scmd=<span class="string">'tar -xvf web.tar -C ./&#123;tag&#125;'</span></span><br></pre></td></tr></table></figure></p><p>如果配置文件中设置了 <code>tag</code>,<code>path</code>，<code>url</code>，<code>lurl</code>,<code>suffixCmd</code>如示例中那样，则对应的 <code>-tag,-path,-url,-lurl,-cmd</code> 都可以省略,也就是直接双击运行。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dk</span><br></pre></td></tr></table></figure></p><h3 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a>特殊用法</h3><p>有一种情况，文件在local repository，希望做一些处理之后再上传服务器，步骤：下载，处理，部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">download</span></span><br><span class="line">wget -P ./upload http://172.30.10.171/FacebookPMD/EC/snapshots/v0.8.5_006/web.tar</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">do</span> sth</span></span><br><span class="line">tar -zcvf ./upload/web.tar.gz ./upload/web.tar</span><br><span class="line"><span class="meta">#</span><span class="bash">execute</span></span><br><span class="line">./dk -name=ec -path=./upload/web.tar.gz -scmd='mkdir &#123;tag&#125;;tar -zxvf web.tar.g -C  ./&#123;tag&#125;;rm -f web.tar.gz;'</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li>傻瓜式双击。初次部署时在config.json配置所有配置项,以后每次部署编辑config.json中的<code>tag</code>，然后直接双击dk.exe。</li><li><p>命令形式，不用每次都编辑配置文件。同样初次部署时在config.json配置所有配置项。以后每次使用命令传入参数<code>-tag</code>覆盖配置文件<code>tag</code>属性：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dk -tag=v0.8.6</span><br></pre></td></tr></table></figure></li><li><p>多项目。为每个项目制作配置文件，如a.json,b.json。运行命令时指定 <code>-name</code>参数。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./dk -name=a -tag=v0.2</span><br><span class="line">./dk -name=b -tag=v0.1</span><br></pre></td></tr></table></figure></li><li><p>特殊用法。从局域网中下载后在上传服务器之前希望做一些处理，把这些所有写成脚本。更好的办法是让这个脚本可以接受一个参数作为版本，使用起来就像是：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy.sh v1.0.0</span><br></pre></td></tr></table></figure></li></ol><p>或者运行过程中输入参数。例：</p><pre><code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">tag=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$tag</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please enter tag name :"</span> tag</span><br><span class="line">tag=<span class="variable">$tag</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">"tag name is <span class="variable">$tag</span>."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dwonload</span></span><br><span class="line"><span class="keyword">if</span> [  -f <span class="string">"./upload/web.tar"</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"target file already exsit, redownload?(y/n)"</span></span><br><span class="line"><span class="built_in">read</span> answer</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$answer</span>"</span> == <span class="string">"y"</span> ]; <span class="keyword">then</span></span><br><span class="line">    rm -rf ./upload/*</span><br><span class="line">        wget -P ./upload http://172.30.10.171/FacebookPMD/EC/snapshots/<span class="variable">$tag</span>/web.tar</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  wget -P ./upload http://172.30.10.171/FacebookPMD/EC/snapshots/<span class="variable">$tag</span>/web.tar</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># do sth</span></span><br><span class="line"><span class="built_in">cd</span> ./upload</span><br><span class="line">tar -zcvf web.tar.gz web.tar</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute</span></span><br><span class="line">./dk -name=ec -tag=<span class="variable">$tag</span> -path=./upload/web.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -s -n 1 -p <span class="string">"Press any key to exit..."</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">bye</span>...</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></code></pre><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DeployKit，部署工具,一个命令形式的可执行程序&lt;code&gt;dk&lt;/code&gt;。在实际应用上线是再平常不过的事了，目前的一些平台工具可以覆盖大部分的上线工作，可是还是有一丢丢需要手动操作，这里就是来解决这部分问题的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://g
      
    
    </summary>
    
    
      <category term="tool" scheme="http://chengjk.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>SSH学习笔记</title>
    <link href="http://chengjk.com/2018/04/27/ssh/"/>
    <id>http://chengjk.com/2018/04/27/ssh/</id>
    <published>2018-04-27T09:34:06.000Z</published>
    <updated>2019-04-13T02:28:10.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h2><p>SSH的英文全称是Secure Shell。使用SSH，你可以把所传输的数据加密压缩。<br>加密方式依赖于安全认证方式，秘钥的安全认证方式可以杜绝“中间人”的攻击方式，而且也能够防止DNS和IP欺骗；压缩的好处就是减少传输的数据亮，加快传输速度。</p><p>最初的SSH是由芬兰一家公司开发，版权的原因现在很多人都转而使用OpenSSH。OpenSSH是SSH的替代软件，而且开源。可预计将来会有更多的人加入OpenSSH阵营。</p><p>SSH 由客户端软件和服务端软件组成，一般安装SSH时会把客户端和服务端一并装上，建立安全连接时由客户端程序发起。</p><h2 id="SSH的安全验证如何工作"><a href="#SSH的安全验证如何工作" class="headerlink" title="SSH的安全验证如何工作"></a>SSH的安全验证如何工作</h2><p>从客户端来看，SSH提供两种级别的验证方式。</p><p>第一种，基于口令的安全验证。口令需要在网络中传输。只要知道账号和口令，就可以登录远程主机。所传输的数据都会被加密压缩，但是不能保证你正在链接的就是你想连接的主机，也就是受到“中间人”这种方式攻击。<br>认证流程</p><ol><li>客户端发起连接请求</li><li>服务端收到请求后把自己的公钥发给客户端</li><li>客户端用接收到的公钥加密自己的口令再发给服务端</li><li>服务端接收到口令密文，用自己的私钥解密获得口令明文。</li><li>对比解密的口令和实际口令</li><li>返回认证结果</li></ol><p>上述流程中，如果第1步的连接请求被劫持，假服务端用自己的公钥去认证，就能获取客户端口令的明文。假服务的就可以用口令去攻击真服务端。这就是“中间人”的攻击方式。</p><p>第二种，给予秘钥的安全认证。需要有秘钥，也就是说必须创建一对秘钥，私钥自己保留（id_rsa），公钥(id_rsa.pub)分发到所有目标远端主机上，连接时使用这一对秘钥去认证。</p><p>认证流程</p><ol><li>客户端向服务端发起连接请求，携带自己的公钥</li><li>服务端检查本地authorized_keys文件，检查接收到的公钥能否匹配</li><li>匹配后，服务端发送质问信息（一段随机明文）给客户端。</li><li>客户端接收质问信息并用自己的私钥加密，将质问密文发送给服务端</li><li>服务端收到质问密文，再用authorized_keys文件中对应公钥去解密。</li><li>服务器将获得的明文和自己第3步发送的明文进行对比</li><li>返回认证结果</li></ol><p>该流程中只有真服务器才有客户端的公钥，没有公钥就不能认证。所以杜绝了中间人的攻击方式。<br>完成上述流程后链接建立。<br>与第一种方式相比，基于秘钥的安全认证不需要在网络上传输口令。</p><h3 id="生成SSH-秘钥"><a href="#生成SSH-秘钥" class="headerlink" title="生成SSH 秘钥"></a>生成SSH 秘钥</h3><blockquote><p>ssh-keygen -t rsa -C “<a href="mailto:yourname@mail.com" target="_blank" rel="noopener">yourname@mail.com</a>“ </p></blockquote><p>其中 -t 指定加密算法，一般是 rsa。-C是注释，方便人工识别。<br>一路回车，最终会在~/.ssh 目录下生成两个文件：</p><blockquote><p>id_rsa   私钥<br> id_rsa.pub 公钥</p></blockquote><h3 id="公钥分发"><a href="#公钥分发" class="headerlink" title="公钥分发"></a>公钥分发</h3><p>公钥分发是将本机公钥拷贝到远端主机authorized_keys文件。为建立本机到远端主机的安全连接做准备。</p><ol><li>远端自有机器。直接拷贝追加到目标文件。</li><li>github之类公共服务。这里服务会提供入口，把公钥文本粘贴过去即可。</li></ol><p>上述流程中公钥传输都只传输公钥的签名。</p><h2 id="相关文件以及用途"><a href="#相关文件以及用途" class="headerlink" title="相关文件以及用途"></a>相关文件以及用途</h2><h3 id="id-rsa"><a href="#id-rsa" class="headerlink" title="id_rsa"></a>id_rsa</h3><p>私钥，用于基于秘钥的安全认证。自己保留不能丢失泄露，如果泄露就是把所有远端主机的权限交出去了。</p><h3 id="id-rsa-pub"><a href="#id-rsa-pub" class="headerlink" title="id_rsa.pub"></a>id_rsa.pub</h3><p>公钥，公开的不存在泄密问题，一般会分发到远端主机，用于建立安全连接。</p><h3 id="known-hosts"><a href="#known-hosts" class="headerlink" title="known_hosts"></a>known_hosts</h3><p>已经连接过的地址，无论是基于口令还是基于秘钥，安全连接建立后都会在此加一条记录。<br>与所有远端主机首次建立安全连接时就会把主机地址写入known_hosts。也就是说knwon_hosts 中记录的地址都被认为是可信任的，一般用作初步的安全认证。</p><h3 id="authorized-keys"><a href="#authorized-keys" class="headerlink" title="authorized_keys"></a>authorized_keys</h3><p>认证信息。存储的戳客户端的公钥，在这里记录过的客户端都可以免密码登录。注意这里只是从客户端到本机，如果要实现双向的免密码登录，需要在每台主机追加对方的公钥。</p><hr><p>什么是公钥和私钥。参考 <a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SSH&quot;&gt;&lt;a href=&quot;#什么是SSH&quot; class=&quot;headerlink&quot; title=&quot;什么是SSH&quot;&gt;&lt;/a&gt;什么是SSH&lt;/h2&gt;&lt;p&gt;SSH的英文全称是Secure Shell。使用SSH，你可以把所传输的数据加密压缩。&lt;br&gt;加密方式依赖于
      
    
    </summary>
    
    
      <category term="study" scheme="http://chengjk.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>IOTA</title>
    <link href="http://chengjk.com/2018/04/27/iota/"/>
    <id>http://chengjk.com/2018/04/27/iota/</id>
    <published>2018-04-27T09:30:50.000Z</published>
    <updated>2019-04-13T02:28:10.114Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://iota.org" target="_blank" rel="noopener">IOTA</a>并不是链，是一个有向不闭环图（Directed Acyclic Graph），Tangle外观像一条围巾，其确认过程就像是织围巾的过程.<br><img src="https://files.readme.io/5aa136c-tangle.png" alt="DAG"></p><p>总供应量为<strong>（3 ^ 33-1）/ 2</strong> 或2,779,530,283,277,761个。所有Token在初始块创建，总数不便，也不用开采.计量符号：<strong>i,Ki,Mi,Gi,Ti,Pi</strong> 1000进制。</p><p>有<a href="http://www.iotachina.com/" target="_blank" rel="noopener">中文社区</a>和完整的<a href="https://iota.readme.io/" target="_blank" rel="noopener">开发者文档</a>，和对应的<a href="https://thetangle.org/transaction/" target="_blank" rel="noopener">主链浏览器</a> 于<a href="https://testnet.thetangle.org" target="_blank" rel="noopener">测试链浏览器</a>。提供常用语言的<a href="https://iota.readme.io/docs/overview" target="_blank" rel="noopener">SDK</a>。</p><h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>IOTA不能开采不需要矿工那如何确认交易？答案就在上图，要发起一笔新交易需要确认之前两笔交易，接口可以获得两个交易用于用于确认。本次交易也需要后续交易确认。未被确认的交易叫做<code>Tip</code>。</p><p>系统会定时（2分钟）发起一个<code>0-value transaction</code> 称之为 MileStone.<br>所有节点有一个共识：被milestone确认过的交易不在变化。类似于6次确认的概念。 这也解决了不活跃时交易的确认问题。</p><h2 id="概念与关联"><a href="#概念与关联" class="headerlink" title="概念与关联"></a>概念与关联</h2><h3 id="Seed"><a href="#Seed" class="headerlink" title="Seed"></a>Seed</h3><p>一切源于Seed,Seeds 是一个长度为81的tryes (‘9,A-Z’)字符串。生成方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linux </span></span><br><span class="line">`cat /dev/urandom |tr -dc A-Z9|head -c<span class="variable">$&#123;1:-81&#125;</span>`</span><br><span class="line"><span class="comment">#Mac </span></span><br><span class="line">`cat /dev/urandom |LC_ALL=C tr -dc <span class="string">'A-Z9'</span> | fold -w 81 | head -n 1`</span><br></pre></td></tr></table></figure><p>Seed加index生成private key 进而生成address，加密算法原因，iota中一个地址只能支付一次，重复使用有被破解的风险。所以每次index使用后自增保证不重复。Seed就相当于私钥，不同的是私钥一般对应一个地址，而Seed与不同的Index组合可以生成多个地址。</p><blockquote><p>NEVER REUSE ADDRESSES<br>Because IOTA uses Winternitz one-time signatures, you should never reuse an address after you have spent from it. Continuously reusing private keys gives a sophisticated attacker the ability to forge the signatures, thus being able to steal funds from the respective address.</p></blockquote><p>这里是Seed，私钥和 账号的<a href="https://iota.readme.io/docs/seeds-private-keys-and-accounts" target="_blank" rel="noopener">官网</a>描述。还有<a href="https://iota.readme.io/docs/glossary" target="_blank" rel="noopener">其他概念</a>的详细描述。</p><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><p>Transaction和其他区块链概念一直，描述一笔或多笔账务明细；包含目标地址和交易量，除此之外还有额外Message和Tag，这里是<a href="https://dev.iota.org/introduction/iota-token/anatomy-of-a-transaction" target="_blank" rel="noopener">详细参数</a>描述。 如何<a href="https://dev.iota.org/introduction/iota-token/making-a-transaction" target="_blank" rel="noopener">发起一笔交易</a>。</p><p>Transaction的集合称之为<code>bundle</code>，相当于block。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h3><p><a href="https://github.com/iotaledger/wallet/releases" target="_blank" rel="noopener">钱包下载</a>地址，下载对应版本按提示安装即可。</p><h3 id="IRI"><a href="#IRI" class="headerlink" title="IRI"></a>IRI</h3><p><a href="https://github.com/iotaledger/iri/releases" target="_blank" rel="noopener">IRI下载地址</a>。 网上的<a href="https://forum.helloiota.com/1191/Setting-Up-a-Full-Node-A-Comprehensive-Guide" target="_blank" rel="noopener">安装指南</a>，网上<a href="https://medium.com/@scott.tudd/an-almost-complete-guide-to-setting-up-a-full-iota-node-d9784dfdc80" target="_blank" rel="noopener">指南2</a>。安装步骤如下：</p><ol><li><p>Install iri Mainnet</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iotaledger/iri.git</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line">java -jar target/iri-1.4.2.3.jar --testnet -p 14265</span><br></pre></td></tr></table></figure></li><li><p>Install iri Testnet</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iotaledger/iri.git</span><br><span class="line">#checkout to testnet branch</span><br><span class="line">git checkout v1.4.2.3-testnet</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line">java -jar target/iri-1.4.2.3.jar --testnet -p 14265</span><br></pre></td></tr></table></figure><p> 默认连接公共测试链，如果要搭建一个私有测试链需要一个<a href="https://github.com/schierlm/private-iota-testnet" target="_blank" rel="noopener">辅助工具</a>用来初始化创世块和设置里程碑。工具安装：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/schierlm/private-iota-testnet.git</span><br><span class="line">#设置里程碑</span><br><span class="line">java -jar target/iota-testnet-tools-0.1-SNAPSHOT-jar-with-dependencies.jar Coordinator localhost 14265</span><br></pre></td></tr></table></figure><p> 文档中描述修的改代码是之前版本，4.2.3已不在需要可以忽略。</p></li><li><p>使用配置文件启动</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[IRI]</span><br><span class="line">PORT = 14265</span><br><span class="line">UDP_RECEIVER_PORT = 14600</span><br><span class="line">TCP_RECEIVER_PORT = 14700</span><br><span class="line">NEIGHBORS = udp://p101.testnet.iota.cafe:14666 udp://p102.testnet.iota.cafe:14666</span><br><span class="line">IXI_DIR = ixi</span><br><span class="line">HEADLESS = true</span><br><span class="line">DEBUG = true</span><br><span class="line">DB_PATH = testnetdb</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>neighbors<br>TCP:<br>tcp://p101.testnet.iota.cafe:15666 tcp://p102.testnet.iota.cafe:15666  tcp://p103.testnet.iota.cafe:15666  tcp://p104.testnet.iota.cafe:15666<br>UDP:<br>udp://p101.testnet.iota.cafe:14666 udp://p102.testnet.iota.cafe:14666 udp://p103.testnet.iota.cafe:14666 udp://p104.testnet.iota.cafe:14666</li></ol><h2 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h2><p> <a href="https://github.com/domschiener/nostalgia" target="_blank" rel="noopener">https://github.com/domschiener/nostalgia</a>. open html with chrome.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:14265 \</span><br><span class="line">  -X POST \</span><br><span class="line">  -H &apos;Content-Type: application/json&apos; \</span><br><span class="line">  -H &apos;X-IOTA-API-Version: 1&apos; \</span><br><span class="line">  -d &apos;&#123;&quot;command&quot;: &quot;getBalances&quot;, &quot;addresses&quot;: [&quot;IMVDY9KSOPVR9SVMOSNMLHBFICBJHJSIGWZWOFNNALPFDPAGGSBJQOUJKDZQHDXYNIKHFDTOOBWCKHQVC&quot;], &quot;threshold&quot;: 100&#125;&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://iota.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IOTA&lt;/a&gt;并不是链，是一个有向不闭环图（Directed Acyclic Graph），Tangle外观像一条围巾，其确认过程就像是织围巾的过程.&lt;br
      
    
    </summary>
    
    
      <category term="exchange" scheme="http://chengjk.com/tags/exchange/"/>
    
      <category term="study" scheme="http://chengjk.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>股票常见指标</title>
    <link href="http://chengjk.com/2018/04/27/stock-key-index/"/>
    <id>http://chengjk.com/2018/04/27/stock-key-index/</id>
    <published>2018-04-27T09:13:15.000Z</published>
    <updated>2019-04-13T02:28:10.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K线图"><a href="#K线图" class="headerlink" title="K线图"></a>K线图</h2><p>由阴阳烛组成，每个烛包含周期内开盘价，收盘价，最高值，最低值；颜色区分涨跌。 如果开盘价还没有产生，采用上一个周期的收盘价。</p><h2 id="Volumn-成交量"><a href="#Volumn-成交量" class="headerlink" title="Volumn 成交量"></a>Volumn 成交量</h2><p>成交量，每天的成交量组成柱状图。</p><h2 id="MA-Moving-Avg"><a href="#MA-Moving-Avg" class="headerlink" title="MA (Moving Avg)"></a>MA (Moving Avg)</h2><p>窗口期的平均值，窗口期随时间滑动。形成平滑曲线图。</p><p>$$MA=1/n\sum_{i=1}^n Price_i $$</p><p>Price 一般是收盘价，也可以是开盘价，最高级，最低价。</p><h2 id="EMA-Exponential-Moving-Average"><a href="#EMA-Exponential-Moving-Average" class="headerlink" title="EMA (Exponential Moving Average)"></a>EMA (Exponential Moving Average)</h2><p>指数加权平均</p><p>$$ EMA_{today} = α <em> Price_{today} + ( 1 - α ) </em> EMA_{yesterday} $$</p><p>其中，α为平滑指数，一般取作2/(N+1)。在计算MACD指标时，EMA计算中的N一般选取12和26天，因此α相应为2/13和2/27。<br> 权重基数2/(N+1)，N是天数。权重随时间的增长呈指数增长，影响越来越小。</p><h2 id="MACD-Moving-Avg-Convergence-and-Divergence"><a href="#MACD-Moving-Avg-Convergence-and-Divergence" class="headerlink" title="MACD (Moving Avg Convergence and Divergence)"></a>MACD (Moving Avg Convergence and Divergence)</h2><p>MA发散收敛情况, 大于零适合买入，小于零适合卖出。<br>$$ MACD=2*(DIF-DEA)$$<br>其中：<br>Dif: 短线减去长线，短线一般12天，长线一般26天<br>$DIF=EMA_{12}-EMA_{26}$<br>DEA: DIF的9日加权移动均线<br>$DEA=DEA_{yesterday}×8/10+DIF_{today}×2/10$</p><h2 id="KDJ"><a href="#KDJ" class="headerlink" title="KDJ"></a>KDJ</h2><p>以J值为主，80以上超买，20以下超卖。<br>KDJ 指标算法</p><p>$ K=2/3<em>K_{yesterday}+1/3</em>RSV_{today}$<br>$ D=2/3<em>D_{yesterday}+1/3</em>K_{today}$<br>$$J=3K-2D$$</p><blockquote><p>若无前一日K值与D值，则可分别用50来代替。</p></blockquote><p>其中未成熟随机指标 RSV<br>$RSV=(收盘价-N日最低)/(N日最高-N日最低)$</p><h2 id="BOLL"><a href="#BOLL" class="headerlink" title="BOLL"></a>BOLL</h2><p>通过计算股价的“标准差”，再求股价的“信赖区间”。<br>该指标在图形上画出三条线，其中上下两条线可以分别看成是股价的压力线和支撑线，而在两条线之间还有一条股价平均线，布林线指标的参数最好设为20。一般来说，股价会运行在压力线和支撑线所形成的通道中。</p><ol><li>MB 中轨线 = MA(N)</li><li>UP 上轨线 = MB+2*MD</li><li>DN 下轨线 = MB-2*MD</li></ol><blockquote><p>MD 标准差计算<br>过去n日的每日价格减去ma的平方和除以n。<br>$MD=\sqrt {1/n\sum_{i=1}^n (Price_i-MA_i)^2 } $</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;K线图&quot;&gt;&lt;a href=&quot;#K线图&quot; class=&quot;headerlink&quot; title=&quot;K线图&quot;&gt;&lt;/a&gt;K线图&lt;/h2&gt;&lt;p&gt;由阴阳烛组成，每个烛包含周期内开盘价，收盘价，最高值，最低值；颜色区分涨跌。 如果开盘价还没有产生，采用上一个周期的收盘价。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="study" scheme="http://chengjk.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg</title>
    <link href="http://chengjk.com/2016/11/30/ffmpeg/"/>
    <id>http://chengjk.com/2016/11/30/ffmpeg/</id>
    <published>2016-11-30T05:04:14.000Z</published>
    <updated>2019-04-13T02:28:10.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li>需求wiki ：<a href="http://172.30.10.223/x/IQEVAQ" target="_blank" rel="noopener">http://172.30.10.223/x/IQEVAQ</a></li><li>download： <ul><li>win <a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">https://ffmpeg.org/download.html</a></li><li>linux <a href="http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz" target="_blank" rel="noopener">http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</a></li></ul></li><li>doc:<a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">https://ffmpeg.org/ffmpeg.html</a></li><li>demo： <a href="http://my.oschina.net/273579540/blog/111060" target="_blank" rel="noopener">http://my.oschina.net/273579540/blog/111060</a></li></ul><p>Cmd Example：</p><blockquote><p>ffmpeg -y -i foo.mp4 -vframes 1 -r 1 -ac 1 -ab 2 -s 320x240 -f image2 lh.jpg</p></blockquote><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>java调用命令行，并接收输出流，解析成Po。不同的参数对应不同的输出流，可以解析成不同的Po。目前只需要名称、时长，分辨率属性，以后按需扩展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需求wiki ：&lt;a href=&quot;http://172.30.10.223/x/IQEVAQ&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="video" scheme="http://chengjk.com/tags/video/"/>
    
      <category term="dev" scheme="http://chengjk.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>conflab</title>
    <link href="http://chengjk.com/2016/11/30/conflab/"/>
    <id>http://chengjk.com/2016/11/30/conflab/</id>
    <published>2016-11-30T04:59:51.000Z</published>
    <updated>2019-04-13T02:28:10.111Z</updated>
    
    <content type="html"><![CDATA[<p>当前版本v1.0.1,详细见<a href="./RELEASE.md">RELEASE.md</a>。</p><p>Conflab，一个集群式配置中心，实现了业务系统配置项的统一管理。配置项存于<code>zookeeper</code>，更新时消息通知对应客户端。客户端需要设置ZK地址，我们把它写入环境变量即可做到零配置。</p><p>服务端conflab-sever管理配置项并推送更新zookeeper；客户端conflab-client端监听<code>zookeeper</code>并更新配置项，业务系统从客户端缓存中获取最新配置项；演示模块conflab-demo是业务系统使用client的一个示例。</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><ul><li>配置zookeeper环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZK_ADDRESS=127.0.0.1:2181</span><br></pre></td></tr></table></figure><ul><li>编译工程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests=true</span><br></pre></td></tr></table></figure><p>client端编译结果个jar包。server端编译完是一个可以解压运行的zip，目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── application.properties</span><br><span class="line">├── bin</span><br><span class="line">│   ├── start.cmd</span><br><span class="line">│   └── start.sh</span><br><span class="line">├── conflab-server-1.0-SNAPSHOT.jar</span><br><span class="line">├── conflab-server-1.0-SNAPSHOT-sources.jar</span><br><span class="line">├── lib</span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── js</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── package.json</span><br><span class="line">    └── temp</span><br></pre></td></tr></table></figure><ul><li>启动服务端<br><code>bin/start.sh</code> or <code>bin/start.cmd</code>。</li><li>访问服务端主页<br><a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a></li><li>增删改查推送<br>通过界面增加配置并推送。</li></ul><blockquote><p>测试用url：/t/save</p></blockquote><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="./assets/chart.jpg" alt="`系统结构图`"></p><h2 id="服务端-conflab-server"><a href="#服务端-conflab-server" class="headerlink" title="服务端 conflab-server"></a>服务端 conflab-server</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>bin目录下有start.sh供linux下启动，start.cmd则在windows下启动。启动之后访问<a href="http://localhost:8080/index.html" target="_blank" rel="noopener">http://localhost:8080/index.html</a>就进入了服务端的管理页面。</p><blockquote><p>主页后增加url参数key<code>?key=my</code>等同于在主页搜索框中搜索关键字‘my’。</p></blockquote><p>这类连接可以作为常用收藏到浏览器，访问就可以实现关键字检索，再也不用被不相关的内容干扰了。e.g.团队中没人都有自己的配置，以自己名字作为关键字就是很好的选择。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为配置数据都在zookeeper上，需要在服务端主机上配置zookeeper的环境变量，每个客户端也需要配置相同的环境变量。<br>系统常用的配置项在根目录application.properties文件中。这里可以修改端口，数据库类型和数据库连接信息。</p><blockquote><p>注意:使用默认数据库SQLite，当spring.jpa.hibernate.ddl-auto=<code>update</code> 时启动会报错，因此默认配置是<code>create</code>,也就是每次启动都会重新创建新表。建议首次启动表生成之后把这个配置注释掉。这个问题后续版本修改。</p></blockquote><h3 id="工程介绍"><a href="#工程介绍" class="headerlink" title="工程介绍"></a>工程介绍</h3><p>Server端负责更新维护<code>zookeeper</code>，可以通过浏览器快捷的管理更新配置，不直接与client端通信。(也就是说，只要数据结构正确，任何一个zookeeper管理工具都可以代替Server端，例如zooInspector。)</p><p>工程前后端分离，前端是最常见的html+js静态页面，毕竟是小工具，越简单越好。后端使用spring boot,spring mvc,spring data jpa，maven打包。数据库可用SpringDataJpa支持的所有类型，提供了mysql和SQLite配置，大型项目建议用mysql。默认使用SQLite，不用做任何配置。简单。</p><p>系统实现了对配置内容分应用分组管理。支持多系统，系统内按业务分组。以应用为单位更新到zookeeper，与该应用相关的客户端会都收到更新消息。</p><h2 id="客户端-conflab-client"><a href="#客户端-conflab-client" class="headerlink" title="客户端 conflab-client"></a>客户端 conflab-client</h2><p>配置好ZK地址后，业务系统可以很容易得到想要配置项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String value=Conflab.getString(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure></p><p>客户端监听Zookeeper的更新事件，默认实现了更新本地配置缓存。其他业务需要可以在回调函数里实现。</p><p>客户端对app（对应zookeeper目录）的监听有两种模式：开发模式和生产模式。</p><ul><li>生产模式比较简单，监听对象固定不变，使用常量即可，例如<code>server</code>。</li><li><p>团队开发模式中，源码都是一样的，每个人却需要各自的配置，配置不能加入版本管理。需要在主机的<code>CONFLAB_HOME</code>目录或用户目录下<code>conflab.properties</code>文件中配置一个或多个对应，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server=jacky-server</span><br><span class="line">demo=jacky-demo</span><br></pre></td></tr></table></figure><p>  这样开发环境下server使用jacky-server配置，demo同理。</p></li></ul><p>支持公共配置。公共配置变化时，会更新所有子系统的客户端。</p><p>客户端只是一个jar包，引入到业务系统中即可。使用办法可以参考范例conflab-demo。client也是特别轻，只依赖了logback和zk客户端。简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当前版本v1.0.1,详细见&lt;a href=&quot;./RELEASE.md&quot;&gt;RELEASE.md&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Conflab，一个集群式配置中心，实现了业务系统配置项的统一管理。配置项存于&lt;code&gt;zookeeper&lt;/code&gt;，更新时消息通知对应客户端。客户
      
    
    </summary>
    
    
      <category term="tool" scheme="http://chengjk.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>lombok</title>
    <link href="http://chengjk.com/2016/11/30/lombok/"/>
    <id>http://chengjk.com/2016/11/30/lombok/</id>
    <published>2016-11-30T04:57:46.000Z</published>
    <updated>2019-04-13T02:28:10.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>使用<a href="https://projectlombok.org/" target="_blank" rel="noopener">lombok</a>重构系统中的模型对象，移除<code>getter</code>，<code>setter</code> 方法。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有些<code>getter</code>，<code>setter</code>方法系统中有重写。不能无差别处理，需要只移除默认生成的那部分。lombok的idea插件可以快捷的给类添加注解，并删除相应的代码。它是通过反射方法名删除的，不管方法实现。这里就有问题了，重要的是假如删错了代码也不会报错，检查代码也麻烦。处理办法如下。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>lombok jar包。增加maven依赖，因为各个模块都有用到所以引用到父级。系统已经引入，此问题不必关心。</li><li>lombok 插件。从Idea插件库中安装，默认版本即可。</li><li>Idea编译环境需要如下设置：<blockquote><p>Setting》Build，Extention，Deployment》Compile》Annotation Processors》Enable annotation processing。</p></blockquote></li></ul><h3 id="处理已重写方法"><a href="#处理已重写方法" class="headerlink" title="处理已重写方法"></a>处理已重写方法</h3><p>扫描package所有class，检查所有<code>getter/setter</code> 方法，给重写了的方法加上标记。插件是通过反射查找方法的，加了标记的代码不会被清理，这部分毕竟是少数，手动处理一下。</p><h2 id="过程问题"><a href="#过程问题" class="headerlink" title="过程问题"></a>过程问题</h2><h3 id="用-Data-产生警告"><a href="#用-Data-产生警告" class="headerlink" title="用@Data 产生警告"></a>用@Data 产生警告</h3><blockquote></blockquote><p>Warning:(12, 1) java: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add ‘@EqualsAndHashCode(callSuper=false)’ to your type.</p><p><strong>解决：</strong> 使用<code>@Getter</code>和<code>@Setter</code>代替<code>@Data</code>可以解决。确实我们只需要<code>getter/setter</code>。推荐加<code>@NoArgsConstructor</code>。</p><h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h3><p>java中boolean类型属性的getter/setter方法比较特殊。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isValid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isValid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValid</span><span class="params">(<span class="keyword">boolean</span> valid)</span> </span>&#123;</span><br><span class="line">    isValid = valid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>检查工具代码需要特殊处理，又因为使用的过程中也有需要<code>getIsValid/setIsValid</code>的场景（如与Json互转），所以检查工具不处理，系统中模型清理后按需增加这类方法。</p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>使用lombok，遇到方法重载，必须保留原有方法和重载过的方法。如果移除原有方法，插件检查方法名时发现已经有了，就不会生成默认方法了。所以都要保留。</p><h3 id="方法注解"><a href="#方法注解" class="headerlink" title="方法注解"></a>方法注解</h3><p>系统中，部分模型的<code>Getter/Setter</code>方法上有注解(如<code>@JSONField</code>)，这类注解需要移到字段上。</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>至此，重构完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;使用&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="tool" scheme="http://chengjk.com/tags/tool/"/>
    
      <category term="dev" scheme="http://chengjk.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>1000个苹果10个箱子</title>
    <link href="http://chengjk.com/2016/11/30/fun/apple/"/>
    <id>http://chengjk.com/2016/11/30/fun/apple/</id>
    <published>2016-11-30T04:54:35.000Z</published>
    <updated>2019-04-13T02:28:10.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>1000个苹果放入10个箱子。客户如果要获得1~1000个苹果中的任意个数，都可以整箱搬，而不用拆开箱子。问是否有这样的装箱方法？</p><h2 id="第一个答案"><a href="#第一个答案" class="headerlink" title="第一个答案"></a>第一个答案</h2><p>第一反应就是二进制，于是有（$2^0$~$2^9$ ）等比数列的思路。但只有1000个苹果，因此最后一箱应该是489（$2^9$-13）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1,2,4,8,16,32,64,128,256,489)</span><br></pre></td></tr></table></figure><p>因为最高位不是$2^n$，因此在这里大于512的数字就不能用二进制表示了。那这部分数字怎么获得呢？</p><p>问题的最终结果是把1000个苹果分为两部分，目标x与（1000-x），也就是说获得$500+n$和获得$500-n$其实是一个问题。前9个箱子可以表示1-511的任何数字，512~1000又可以表示为一个小于500的数字的补数，问题解决。表示为：</p><p>$<br>f(n) =<br>\begin{cases}<br>前9个箱子的二进制表示  &amp; \text{ $n$ &lt;= 511} \<br>1000-前9个箱子的二进制表示 &amp; \text{ 1000&gt;= $n$ &gt; 511}<br>\end{cases}<br>$</p><h2 id="问题继续"><a href="#问题继续" class="headerlink" title="问题继续"></a>问题继续</h2><p>这个问题我们已经找到了一个解，那么还有其他解吗，怎么求解？</p><p>当然最粗暴的方法就是遍历，只要满足条件：</p><ol><li>集合长度等于10</li><li>集合元素之和等于1000</li><li>能组合出1~1000的所有数字</li></ol><p>好处就是能求出全部解法，坏处就是慢且耗费资源。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如果有1023个苹果，那就完美了，用2进制表示。就只有一个解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1,2,4,8,16,32,64,128,256,512)</span><br></pre></td></tr></table></figure></p><p>如果是1022个呢？少了1个。那么正确的解一定是$(2^0-2^9)$ 集合中的某个元素减1。经过简单人工验算，少的这一个一定在最后一个元素，也就是从512变成了511。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1,2,4,8,16,32,64,128,256,511)</span><br></pre></td></tr></table></figure></p><p>如果是1021呢？少了2个。有两个解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1,2,4,8,16,32,64,128,256,510)</span><br><span class="line">(1,2,4,8,16,32,64,128,255,511)</span><br></pre></td></tr></table></figure></p><p>这时就会发现原来从1000个数字里找到满足条件的10 个数字的问题转化成了将23个名额分配到以$(2^0-2^9)$ 为基础的集合中。每个正确的解都属于这些分配组合的集合。这是必要条件。</p><p>$<br>1023=&gt;(1,2,4,8,16,32,64,128,256,512)<br>$<br>$<br>1000=&gt;(1,2,4,8,16,32,64,128,256,512)-23<br>$</p><blockquote><p>1.分给所有元素的值之和等于23<br>2.分给某个元素的值不大于23</p></blockquote><h3 id="继续观察"><a href="#继续观察" class="headerlink" title="继续观察"></a>继续观察</h3><p>如果给基础集合的第三位(4)减去1,那么前三位表示的数字范围从1-7变成了1-6,如果第四位(8)不变，那么7这个数子就无法表示了；要表示7就必须给第四位(8)减1，同理，后边的元素都得至少减1。<br>当第三（4）第四（8）位都减1之后，前四位的表示范围从1-16变成了1-14.也就是说第五位至少得减去2。有趣的结果出来了</p><blockquote><p>3.分给某个元素的值要大于等于分给前边所有元素之和。</p></blockquote><p>问题转化成了把23按这个规则分配。正确答案一定在这里头。目前还是必要条件。</p><h2 id="更多的答案"><a href="#更多的答案" class="headerlink" title="更多的答案"></a>更多的答案</h2><p>用程序实现，思路如下</p><ol><li>把数字23按上述规则拆分。得到一系列拆分结果集合。</li><li>把每一个拆分集合与基础集合组合。得到全部结果集合。</li><li>验证全部结果集合，是否可以获得1-1000的所有数字。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jacky.cheng on 2016/6/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer[] baseLine = &#123;<span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        generate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算全部解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer origin = <span class="number">23</span>;</span><br><span class="line">        List&lt;Integer&gt; seed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        seed.add(origin);</span><br><span class="line">        result.add(seed);</span><br><span class="line">        recurChildren(seed);</span><br><span class="line">        System.out.println(<span class="string">"----------共有"</span> + result.size() + <span class="string">"组结果--------"</span>);</span><br><span class="line">        <span class="comment">//分配结果与基础集合组合</span></span><br><span class="line">        result = result.stream().map(r -&gt; &#123;</span><br><span class="line">            List&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                a.add(i &lt; r.size() ? (baseLine[i] - r.get(i)) : baseLine[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            validate(a);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归算出所有的分配方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recurChildren</span><span class="params">(List&lt;Integer&gt; o)</span> </span>&#123;</span><br><span class="line">        Integer last = o.get(o.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (last &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            List&lt;Integer&gt; temp;</span><br><span class="line">            Integer i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (--last &gt;= ++i) &#123;</span><br><span class="line">                List&lt;Integer&gt; head = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; o.size() - <span class="number">1</span>; m++) &#123;</span><br><span class="line">                    head.add(o.get(m));</span><br><span class="line">                &#125;</span><br><span class="line">                temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                temp.addAll(head);</span><br><span class="line">                temp.add(last);</span><br><span class="line">                temp.add(i);</span><br><span class="line">                result.add(temp);</span><br><span class="line">                recurChildren(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证一个结果 1-1000。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;Integer&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validateOne(i, p)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Failed! "</span> + i + <span class="string">" for:"</span> + p.toString());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.toString() + <span class="string">" ok"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证一个结果的一个值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateOne</span><span class="params">(<span class="keyword">int</span> i, List&lt;Integer&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer b : p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r + b &lt;= i) r = r + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r == i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序得到了74 组解，并且每一组都通过了验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[489, 256, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[490, 255, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[491, 254, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[491, 255, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[492, 253, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[492, 254, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[493, 252, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[493, 253, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[493, 254, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[493, 254, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[494, 251, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[494, 252, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[494, 253, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[494, 253, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 250, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 251, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 252, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 252, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 253, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[495, 253, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 249, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 250, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 251, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 251, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 252, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[496, 252, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 248, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 249, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 250, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 250, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 251, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 251, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 252, 124, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 252, 125, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 252, 126, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[497, 252, 126, 63, 31, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 247, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 248, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 249, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 249, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 250, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 250, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 251, 124, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 251, 125, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 251, 126, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[498, 251, 126, 63, 31, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 246, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 247, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 248, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 248, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 249, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 249, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 250, 124, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 250, 125, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 250, 126, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 250, 126, 63, 31, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 251, 123, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 251, 124, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 251, 125, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[499, 251, 125, 63, 31, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 245, 128, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 246, 127, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 247, 126, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 247, 127, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 248, 125, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 248, 126, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 249, 124, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 249, 125, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 249, 126, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 249, 126, 63, 31, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 250, 123, 64, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 250, 124, 63, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 250, 125, 62, 32, 16, 8, 4, 2, 1] ok</span><br><span class="line">[500, 250, 125, 63, 31, 16, 8, 4, 2, 1] ok</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>按条件遍历搜寻全部结果，和上述结果比对。<br>需要满足的条件：</p><ol><li>集合长度等于10</li><li>集合元素之和等于1000</li><li>能组合出1~1000的所有数字</li></ol><ul><li>直接遍历，每个元素的取值范围是：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（m~n]</span><br><span class="line">(1,2,2~4,4~8,8~16,16~32,32~64,64~128,128~256,256~512)</span><br></pre></td></tr></table></figure><ul><li>结合分析结论1，每个元素都大于前一个，且最多比基础少23。于是每个元素的取值范围是：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（m~n]</span><br><span class="line">(1,2,2~4,4~8,8~16,16~32,41~64,105~128,233~256,489~512)</span><br></pre></td></tr></table></figure><ul><li>结合分析结论1和结论3，每个元素的取值范围是：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[m~n]</span><br><span class="line">(1,2,4,8,16,31~32,62~64,123~128,245~256,489~512)</span><br><span class="line">又因为必须把23个分完，最高位的取值范围变成了489~500</span><br></pre></td></tr></table></figure><p>Java实现：<br>为了方便计算，我们把基础集合倒序排列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        eval();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> box6 = <span class="number">31</span>; box6 &lt;= <span class="number">32</span>; box6++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> box7 = <span class="number">62</span>; box7 &lt;= <span class="number">64</span>; box7++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> box8 = <span class="number">123</span>; box8 &lt;=<span class="number">128</span>; box8++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> box9 = <span class="number">245</span>; box9 &lt;=<span class="number">256</span>; box9++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> box10 = <span class="number">489</span>; box10 &lt;= <span class="number">500</span>; box10++) &#123;</span><br><span class="line">                            Integer[] vars = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">                            vars[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                            vars[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                            vars[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">                            vars[<span class="number">3</span>] = <span class="number">8</span>;</span><br><span class="line">                            vars[<span class="number">4</span>] = <span class="number">16</span>;</span><br><span class="line">                            vars[<span class="number">5</span>] = box6;</span><br><span class="line">                            vars[<span class="number">6</span>] = box7;</span><br><span class="line">                            vars[<span class="number">7</span>] = box8;</span><br><span class="line">                            vars[<span class="number">8</span>] = box9;</span><br><span class="line">                            vars[<span class="number">9</span>] = box10;</span><br><span class="line">                            <span class="keyword">if</span>(addAllEqual1000(vars))&#123;</span><br><span class="line">                                <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                                    flag = canBuild(i, vars);</span><br><span class="line">                                    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (flag) System.out.println(ArrayUtils.toString(vars));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canBuild</span><span class="params">(<span class="keyword">int</span> value,Integer [] vars)</span> </span>&#123;</span><br><span class="line">        Boolean[] has = &#123;<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len = vars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= vars[i] &amp;&amp; has[i]) &#123;</span><br><span class="line">                value -= vars[i];</span><br><span class="line">                has[i] = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addAllEqual1000</span><span class="params">(Integer [] vars)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer var : vars) &#123;</span><br><span class="line">            sum+=var;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum==<span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序同样得到了74 组解，且都通过了验证。</p><h2 id="问题与总结"><a href="#问题与总结" class="headerlink" title="问题与总结"></a>问题与总结</h2><p>对于一个相对复杂的问题，分析总结还是很重要的。如上述过程，即使用粗暴的遍历，分析也可以大幅缩小答案的取值范围：直接遍历循环次数是68719476736（2<em>4</em>8<em>16</em>32<em>64</em>128<em>256），分析后遍历循环次数是4032（2</em>2<em>3</em>4<em>7</em>12）足足降低了7个数量级。</p><p>以上证明都是依据与观察总结，虽然得到了全部结果，总觉不完美。不知有没有严格证明过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;1000个苹果放入10个箱子。客户如果要获得1~1000个苹果中的任意个数，都可以整箱搬，而不用拆开箱子。问是否有这样的装箱方法？&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="fun" scheme="http://chengjk.com/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>Hexo github pages 实践</title>
    <link href="http://chengjk.com/2016/11/26/hexo/"/>
    <id>http://chengjk.com/2016/11/26/hexo/</id>
    <published>2016-11-26T04:33:41.000Z</published>
    <updated>2019-04-13T03:14:43.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><strong>一个Github账号可不可以有多个Pages？</strong><br>可以 ,github支持一个个人主页和多个项目主页。个人主页地址是https://{usermame}.github.io; 项目主页的路径是 https://{username}.github.io/project. 个人主页和项目主页都可以自定义域名，方法一致。</p><p><strong>是否支持二级域名？</strong><br>支持常规二级域名，不支持通配符<code>*.example.com</code>。常用的是 <code>www</code>，顶级域名 <code>@</code></p><ol><li>创建 github repo。</li><li>Setting &gt; GitHub Pages&gt;Source。选择 master branch。</li><li>Setting &gt; GitHub Pages&gt;Theme chooser。选择一个jekyll主题,不选会使用默认空白主题。</li><li>下载空仓库到本地。 <code>git clone  git@github.com/chengjk/chengjk.github.com.git</code></li></ol><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ol><li>进入项目跟目录初始化hexo <code>hexo init</code></li><li>添加 CNAME 文件 指向自己的域名 e.g. <code>blog.example.com</code></li><li>创建 edit分支用于写作。hexo 默认deploy 到 master分支,master也是github的默认分支。在edit分支写作，该分支只存源码和配置。</li><li><p>编辑  .gitignore  排除工具和发布文件夹</p><blockquote><p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/<br>.git/</p></blockquote></li><li><p>主题。 在themes 文件夹中 下载一款自己喜欢的主题，编辑_config.yml个人配置。 增加一个文件描述主题添加到版本管理，用于在其他环境写作。</p></li></ol><p>接下来就可以在 edit分支写作，然后 hexo deploy到master分支。然后就可以在自己的域名下看到新写的文章了。</p><hr><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>{username}.github.io</td></tr></tbody></table><p>记录类型为A的记录值是ipv4，CNAME的记录值是域名。主机记录就是二级域名，常用默认是www，直接用顶级域名配 @，二级域名不支持通配<code>*</code>。</p><h2 id="我们既然是Github-Pages-就选CNAME，把值设置为-username-github-io-当域名dns解析状态为正常时，就可以用了。"><a href="#我们既然是Github-Pages-就选CNAME，把值设置为-username-github-io-当域名dns解析状态为正常时，就可以用了。" class="headerlink" title="我们既然是Github Pages, 就选CNAME，把值设置为{username}.github.io. 当域名dns解析状态为正常时，就可以用了。"></a>我们既然是Github Pages, 就选CNAME，把值设置为{username}.github.io. 当域名dns解析状态为正常时，就可以用了。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一个Github账号可不可以有多个Pages？&lt;/strong&gt;&lt;br&gt;可以 ,github
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://chengjk.com/tags/hexo/"/>
    
  </entry>
  
</feed>
